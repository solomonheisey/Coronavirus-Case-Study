install.packages("devtools")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
data("coronavirus")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
update_dataset()
data("coronavirus")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
update_dataset()
data("coronavirus")
summary("coronavirus")
Sys.which("make")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(dplyr)
update_dataset()
data("coronavirus")
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
head(summary_df)
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
summary_df[, c("country", "total_cases")]
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
summary_df[, c("country", "total_cases")] %>% head(20)
View(summary_df)
View(summary_df)
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(dplyr)
update_dataset()
data("coronavirus")
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
barchart <- summary_df %>% head(20)
summary_df[, c("country", "total_cases")] %>% head(20)
View(barchart)
View(barchart)
View(barchart)
View(barchart)
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
barchart <- summary_df %>% head(20)
dat <- data.fram(country = barchart$country, values = as.numeric(barchart$total_cases))
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
barchart <- summary_df %>% head(20)
dat <- data.frame(country = barchart$country, values = as.numeric(barchart$total_cases))
ggplot(data=dat, aes(x=country, y=values, fill=country)) + geom_bar(stat="identity") + ggtitle("Top 20 COVID-19 Confirmed Cases by Country")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(dplyr)
library(ggplot2)
update_dataset()
data("coronavirus")
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
barchart <- summary_df %>% head(20)
dat <- data.frame(country = barchart$country, values = as.numeric(barchart$total_cases))
ggplot(data=dat, aes(x=country, y=values, fill=country)) + geom_bar(stat="identity") + ggtitle("Top 20 COVID-19 Confirmed Cases by Country")
summary_df[, c("country", "total_cases")] %>% head(20)
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
summary_df %>% head(20)
barchart <- summary_df %>% head(20)
dat <- data.frame(country = barchart$country, values = as.numeric(barchart$total_cases))
ggplot(data=dat, aes(x=country, y=values, fill=country)) + geom_bar(stat="identity") + ggtitle("Top 20 COVID-19 Confirmed Cases by Country") + theme(legend.position="bottom") + theme(legend.direction = "vertical")
summary_df[, c("country", "total_cases")] %>% head(20)
remove.packages("glue")
devtools::install_github("tidyverse/glue")
install.packages("devtools")
devtools::install_github("tidyverse/glue")
install.packages("glue")
install.packages("glue")
install.packages("backports")
install.packages("ellipsis")
install.packages("pkgload")
# install.packages("devtools")
devtools::install_github("RamiKrispin/coronavirus")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(glue)
update_dataset()
data("coronavirus")
ggplot(data=dat, aes(x=country, y=values, fill=values)) + geom_bar(stat="identity") + geom_text(aes(label=values), yjust=-10, colour="black", size=2, angle=90 + position_dodge(0.9)) + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Top 20 COVID-19 Confirmed Cases by Country")
install.packages("ggeasy")
install.packages("plotly")
devtools::install_github("tidyverse/tidyr")
View(coronavirus)
View(coronavirus)
View(summary_df)
View(summary_df)
# install.packages("devtools")
devtools::install_github("jonocarroll/ggeasy")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(glue)
library(tidyr)
library(plotly)
update_dataset()
apple_mobility
install.packages("tidyverse")
install.packages("drat")
drat::addRepo("kjhealy")
install.packages("covdata")
install.packages("mmer")
install.packages("my.colors")
install.packages("lubridate")
install.packages("here")
install.packages("janitor")
install.packages("socviz")
install.packages("ggrepel")
install.packages("showtext")
install.packages("myriad")
# install.packages("devtools")
devtools::install_github("jonocarroll/ggeasy")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(glue)
library(tidyr)
library(tidyverse)
library(drat)
library(covdata)
library(plotly)
library(lubridate)
library(here)
library(janitor)
library(socviz)
library(ggrepel)
library(showtext)
showtext_auto()
update_dataset()
data("coronavirus")
options(warn=-1)
my_colors <- function(palette="cb"){
### The palette with black:
cb.palette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
## Same one Reversed
rcb.palette <- rev(cb.palette)
## Blue and yellow first choices
bly.palette <- c("#E69F00", "#0072B2", "#000000", "#56B4E9", "#009E73", "#F0E442", "#D55E00", "#CC79A7")
if (palette=="cb") return(cb.palette) else if (palette=="rcb") return(rcb.palette) else if (palette=="bly") return(bly.palette) else stop("Choose cb, rcb, or bly ony.")
}
summary(coronavirus)
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
barchart <- summary_df %>% head(20)
dat <- data.frame(country = barchart$country, values = as.numeric(barchart$total_cases))
ggplot(data=dat, aes(x=reorder(country, -values), y=values, fill=values)) + geom_bar(stat="identity") + ggtitle("COVID-19 Confirmed Cases Top 20 Countries") + labs(y="Confirmed Cases", x = "Country", fill="Confirmed Cases")  + theme(axis.text.x = element_text(angle = 90), plot.title=element_text(hjust=0.5))
barchart
conf_df <- coronavirus %>%
filter(type == "recovered") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases) %>%
mutate(parents = "Recovered Cases") %>%
ungroup()
top_20 <- conf_df %>% head(20)
plot_ly(data = top_20,
type= "treemap",
values = ~total_cases,
labels= ~ country,
parents=  ~parents,
domain = list(column=0),
title="Recovered",
textinfo="label+value+percent parent")
coronavirus %>%
group_by(type, date) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type, values_from = total_cases) %>%
arrange(date) %>%
mutate(active = confirmed - death - recovered) %>%
mutate(active_total = active,
recovered_total = recovered,
death_total = death) %>%
plot_ly(x = ~ date,
y = ~ active_total,
name = 'Active',
fillcolor = '#1f77b4',
type = 'scatter',
mode = 'none',
stackgroup = 'one') %>%
add_trace(y = ~ death_total,
name = "Death",
fillcolor = '#d62728') %>%
add_trace(y = ~recovered_total,
name = 'Recovered',
fillcolor = '#2ca02c') %>%
layout(title = "COVID-19 Cases Worldwide",
legend = list(x = 0.1, y = 0.9),
yaxis = list(title = "Number of Cases"),
xaxis = list(title = "Date"))
raw_ny <- apple_mobility %>%
filter(region == "New York City") %>%
select(region:index) %>%
rename(mode = transportation_type) %>%
mutate(mode = tools::toTitleCase(mode),
weekend = isWeekend(date),
holiday = isHoliday(as.timeDate(date), listHolidays())) %>%
mutate(max_day = ifelse(is_max(index), date, NA),
max_day = as_date(max_day))
# install.packages("devtools")
devtools::install_github("jonocarroll/ggeasy")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(glue)
library(tidyr)
library(tidyverse)
library(drat)
library(covdata)
library(plotly)
library(lubridate)
update_dataset()
data("coronavirus")
options(warn=-1)
summary(coronavirus)
summary_df <- coronavirus %>%
filter(type == "confirmed") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases)
barchart <- summary_df %>% head(20)
dat <- data.frame(country = barchart$country, values = as.numeric(barchart$total_cases))
ggplot(data=dat, aes(x=reorder(country, -values), y=values, fill=values)) + geom_bar(stat="identity") + ggtitle("COVID-19 Confirmed Cases Top 20 Countries") + labs(y="Confirmed Cases", x = "Country", fill="Confirmed Cases")  + theme(axis.text.x = element_text(angle = 90), plot.title=element_text(hjust=0.5))
barchart
conf_df <- coronavirus %>%
filter(type == "recovered") %>%
group_by(country) %>%
summarise(total_cases = sum(cases)) %>%
arrange(-total_cases) %>%
mutate(parents = "Recovered Cases") %>%
ungroup()
top_20 <- conf_df %>% head(20)
plot_ly(data = top_20,
type= "treemap",
values = ~total_cases,
labels= ~ country,
parents=  ~parents,
domain = list(column=0),
title="Recovered",
textinfo="label+value+percent parent")
coronavirus %>%
group_by(type, date) %>%
summarise(total_cases = sum(cases)) %>%
pivot_wider(names_from = type, values_from = total_cases) %>%
arrange(date) %>%
mutate(active = confirmed - death - recovered) %>%
mutate(active_total = active,
recovered_total = recovered,
death_total = death) %>%
plot_ly(x = ~ date,
y = ~ active_total,
name = 'Active',
fillcolor = '#1f77b4',
type = 'scatter',
mode = 'none',
stackgroup = 'one') %>%
add_trace(y = ~ death_total,
name = "Death",
fillcolor = '#d62728') %>%
add_trace(y = ~recovered_total,
name = 'Recovered',
fillcolor = '#2ca02c') %>%
layout(title = "COVID-19 Cases Worldwide",
legend = list(x = 0.1, y = 0.9),
yaxis = list(title = "Number of Cases"),
xaxis = list(title = "Date"))
cov_case_sm <- cov_case_curve  %>%
filter(iso3 %in% top_50$iso3) %>%
ggplot(mapping = aes(x = days_elapsed, y = cu_cases)) +
# The line traces for every country, in every panel
geom_line(data = cov_case_curve_bg,
aes(group = iso3),
size = 0.15, color = "gray80") +
# The line trace in red, for the country in any given panel
geom_line(color = "firebrick",
lineend = "round") +
# The point at the end. Bonus trick: some points can have fills!
geom_point(data = cov_case_curve_endpoints,
size = 1.1,
shape = 21,
color = "firebrick",
fill = "firebrick2"
) +
# The country label inside the panel, in lieu of the strip label
geom_text(data = top_50,
mapping = aes(label = cname),
vjust = "inward",
hjust = "inward",
fontface = "bold",
color = "firebrick",
size = 2.1) +
# Log transform and friendly labels
scale_y_log10(labels = scales::label_number_si()) +
# Facet by country, order from high to low
facet_wrap(~ reorder(cname, -cu_cases), ncol = 5) +
labs(x = "Days Since 100th Confirmed Case",
y = "Cumulative Number of Cases (log10 scale)",
title = "Cumulative Number of Reported Cases of COVID-19: Top 50 Countries",
subtitle = paste("Data as of", format(max(cov_curve$date), "%A, %B %e, %Y")),
caption = "Kieran Healy @kjhealy / Data: https://www.ecdc.europa.eu/") +
theme(plot.title = element_text(size = rel(1), face = "bold"),
plot.subtitle = element_text(size = rel(0.7)),
plot.caption = element_text(size = rel(1)),
# turn off the strip label and tighten the panel spacing
strip.text = element_blank(),
panel.spacing.x = unit(-0.05, "lines"),
panel.spacing.y = unit(0.3, "lines"),
axis.text.y = element_text(size = rel(0.5)),
axis.title.x = element_text(size = rel(1)),
axis.title.y = element_text(size = rel(1)),
axis.text.x = element_text(size = rel(0.5)),
legend.text = element_text(size = rel(1)))
install.packages("gghighlight")
install.packages("ggrepel")
# install.packages("devtools")
devtools::install_github("jonocarroll/ggeasy")
library(coronavirus)
library(dplyr)
library(ggplot2)
library(glue)
library(tidyr)
library(tidyverse)
library(drat)
library(covdata)
library(plotly)
library(lubridate)
library(gghighlight)
library(ggrepel)
update_dataset()
